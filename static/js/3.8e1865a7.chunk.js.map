{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","className","s","descriptionBlock","src","photos","large","Preloader","Post","item","message","likesCount","AddPostForm","formik","useFormik","initialValues","post","validationSchema","addPostValidator","onSubmit","values","actions","addPost","resetForm","handleSubmit","TextField","variant","name","type","placeholder","handleChange","handleBlur","error","touched","Boolean","errors","helperText","Button","color","MyPosts","postsElements","posts","map","p","postsBlock","MyPostsContainer","connect","state","profilePage","newPostText","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","React","Component","compose","withAuthRedirect","auth","id","isAuth","withRouter"],"mappings":"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","file":"static/js/3.8e1865a7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3WWd_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2gJeO\",\"posts\":\"MyPosts_posts__3Ytqn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__29EMi\"};","import React, {useEffect, useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\n\r\nconst  ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status);\r\n    }, [props.status] )\r\n\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n        return (\r\n            <div>\r\n                { !editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode} >{props.status || 'No status'}</span>\r\n                </div>\r\n                }\r\n                {editMode &&\r\n                <div>\r\n                    <input\r\n                        onChange={onStatusChange}\r\n                        autoFocus={true}\r\n                        onBlur={deactivateEditMode}\r\n                        value={status}\r\n                    />\r\n                </div>\r\n                }\r\n            </div>\r\n        );\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}) => {\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large} />\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSq_I0JFO2DxoAV3J-sI7ajtx0qW0Q5neaY_A&usqp=CAU'/>\r\n            { props.message }\r\n            <div>\r\n                <span>Like</span> { props.likesCount }\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {useFormik} from \"formik\";\r\nimport {addPostValidator} from '../../../utils/validators/validators';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\nconst MyPosts = (props) => {\r\n    \r\n    let postsElements = props.posts.map(p => <Post message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            {postsElements}\r\n            <AddPostForm addPost={props.addPost}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddPostForm = (props) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            post: ''\r\n        },\r\n        validationSchema: addPostValidator,\r\n        onSubmit: (values, actions) => {\r\n            props.addPost(values.post)\r\n            actions.resetForm()\r\n        }\r\n    })\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <TextField\r\n                variant=\"standard\"\r\n                name=\"post\"\r\n                type=\"text\"\r\n                placeholder=\"Напиши что нибудь :)\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.post}\r\n                onBlur={formik.handleBlur}\r\n                error={formik.touched.post && Boolean(formik.errors.post)}\r\n                helperText={formik.touched.post && formik.errors.post}\r\n            />\r\n                <Button type=\"submit\" color=\"primary\" variant=\"contained\" >Add post</Button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator, updateNewPostTextActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (post) => {\r\n            dispatch(addPostActionCreator(post))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {getStatus, getUserProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../hoc/withAuthRedirect\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n\r\n        if (userId) {\r\n            this.props.getUserProfile(userId);\r\n            this.props.getStatus(userId);\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus} />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n)(ProfileContainer)\r\n\r\n\r\n"],"sourceRoot":""}