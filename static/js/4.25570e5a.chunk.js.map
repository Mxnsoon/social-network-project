{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","name","Message","message","AddMessageForm","formik","useFormik","initialValues","validationSchema","sendMessageValidator","onSubmit","values","actions","sendMessage","resetForm","handleSubmit","TextField","variant","type","placeholder","onChange","handleChange","onBlur","handleBlur","error","touched","Boolean","errors","helperText","value","Button","color","Dialogs","state","dialogsPage","isAuth","dialogsElements","dialogs","map","d","messagesElements","messages","m","newMessageText","dialogsItems","compose","connect","auth","dispatch","sendMessageCreator","withAuthRedirect"],"mappings":"mHACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,2FCanKC,EAVI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACI,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACI,cAAC,IAAD,CAASC,GAAIN,EAAb,SAAoBD,EAAMQ,UCEvBC,EARC,SAACT,GACb,OACI,qBAAKG,UAAWC,IAAEC,OAAlB,SAA2BL,EAAMU,W,4CC4BnCC,EAAiB,SAACX,GAEpB,IAAMY,EAASC,YAAU,CACrBC,cAAe,CACXJ,QAAS,IAEbK,iBAAkBC,IAClBC,SAAU,SAACC,EAAQC,GACfnB,EAAMoB,YAAYF,EAAOR,SACzBS,EAAQE,eAIhB,OACI,uBAAMJ,SAAUL,EAAOU,aAAvB,UACI,cAACC,EAAA,EAAD,CACIC,QAAQ,WACRtB,GAAG,UACHM,KAAK,UACLiB,KAAK,OACLC,YAAY,qBACZC,SAAUf,EAAOgB,aACjBC,OAAQjB,EAAOkB,WACfC,MAAOnB,EAAOoB,QAAQtB,SAAWuB,QAAQrB,EAAOsB,OAAOxB,SACvDyB,WAAYvB,EAAOoB,QAAQtB,SAAWE,EAAOsB,OAAOxB,QACpD0B,MAAOxB,EAAOM,OAAOR,UACrB,cAAC2B,EAAA,EAAD,CAAQZ,KAAK,SAASa,MAAM,UAAUd,QAAQ,YAA9C,wEAODe,EAxDC,SAACvC,GAEb,IAAIwC,EAAQxC,EAAMyC,YAElB,IAAKzC,EAAM0C,OAAQ,OAAO,cAAC,IAAD,CAAUnC,GAAI,WAExC,IAAIoC,EAAkBH,EAAMI,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYtC,KAAMsC,EAAEtC,KAAiBN,GAAI4C,EAAE5C,IAAZ4C,EAAE5C,OAC1E6C,EAAmBP,EAAMQ,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAASvC,QAASuC,EAAEvC,SAAcuC,EAAE/C,OAC9DsC,EAAMU,eAE3B,OACI,sBAAK/C,UAAWC,IAAEwC,QAAlB,UACI,qBAAKzC,UAAWC,IAAE+C,aAAlB,SACKR,IAEL,qBAAKxC,UAAWC,IAAE4C,SAAlB,SACI,oCAAOD,EAAP,SAEJ,cAAC,EAAD,CAAgB3B,YAAapB,EAAMoB,kB,yBCNhCgC,sBACXC,aAhBkB,SAACb,GACnB,MAAO,CACHC,YAAaD,EAAMC,YACnBC,OAAQF,EAAMc,KAAKZ,WAIF,SAACa,GACtB,MAAO,CACHnC,YAAa,SAACV,GACV6C,EAASC,YAAmB9C,SAOpC+C,IAFWL,CAGbb","file":"static/js/4.25570e5a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2LWCV\",\"dialogsItems\":\"Dialogs_dialogsItems__2JCGU\",\"active\":\"Dialogs_active__1x1Zu\",\"messages\":\"Dialogs_messages__whugN\",\"message\":\"Dialogs_message__3VFGA\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.dialog}>{props.message}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useFormik} from \"formik\";\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {sendMessageValidator} from \"../../utils/validators/validators\";\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    if (!props.isAuth) return <Redirect to={\"/login\"}/>;\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>);\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id}/>)\r\n    let newMessageBody = state.newMessageText\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div> {messagesElements} </div>\r\n            </div>\r\n            <AddMessageForm sendMessage={props.sendMessage} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddMessageForm = (props) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            message: '',\r\n        },\r\n        validationSchema: sendMessageValidator,\r\n        onSubmit: (values, actions) => {\r\n            props.sendMessage(values.message)\r\n            actions.resetForm()\r\n        }\r\n    })\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <TextField\r\n                variant=\"standard\"\r\n                id=\"message\"\r\n                name=\"message\"\r\n                type=\"text\"\r\n                placeholder='Enter your message'\r\n                onChange={formik.handleChange}\r\n                onBlur={formik.handleBlur}\r\n                error={formik.touched.message && Boolean(formik.errors.message)}\r\n                helperText={formik.touched.message && formik.errors.message}\r\n                value={formik.values.message}/>\r\n                <Button type=\"submit\" color=\"primary\" variant=\"contained\" >Отправить</Button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (message) => {\r\n            dispatch(sendMessageCreator(message))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)"],"sourceRoot":""}